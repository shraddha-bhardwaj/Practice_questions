//shortest path -- displacement 
#include <bits/stdc++.h>

using namespace std;

int main()
{
    char a[1000];
    cin.getline(a,1000);
    int x=0,y=0;
    for(int i=0;a[i]!='\0';i++){
        switch(a[i]){
            case 'N': y++;
                      break;
            case 'S': y--;
                      break;
            case 'E': x++;
                      break;
            case 'W': x--;
                      break;
        }
    }
    cout<<x<<","<<y<<endl;
    if(x>=0 and y>=0){
        while(y--){
            cout<<"N";
        }
        while(x--){
            cout<<"E";
        }
    }
    else if(x<=0 and y>=0){
        while(y--){
            cout<<"N";
        }
        while(x++){
            cout<<"W";
        }
    }
    else if(x<=0 and y<=0){
        while(y++){
            cout<<"S";
        }
        while(x++){
            cout<<"W";
        }
    }
     else if(x>=0 and y<=0){
         while(y++){
            cout<<"S";
        }
        while(x--){
            cout<<"E";
        }
       
    }
    

    return 0;
}
***************************************************************************************************************************************************************************
//read N strings and print the largest string

#include <bits/stdc++.h>

using namespace std;

int main()
{
    char a[1000];
    char largest[1000];
    int large1=0;
    int n;
    cin>>n;
    cin.get();
    while(n--){
        cin.getline(a,1000,'.');
        int len=strlen(a);
        if(len>large1){
            large1=len;
            strcpy(largest,a);
        }
        
        
    }
    cout<<largest<<endl<<"length "<<large1;
    

    return 0;
}
*****************************************************************************************************************************************************************************
// check palindrome

#include<bits/stdc++.h>
using namespace std;

bool isPalindrome(string str)
{
    // your code goes here
    string check=str;
    int n=str.length();
    int l=0,h=n-1;
    while(l<h){
        swap(check[l],check[h]);
        l++;
        h--;
    }
    if(check==str){
        return true;
    }
    else{
        return false;
    }
    
}
