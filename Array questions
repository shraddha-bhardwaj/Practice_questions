// Reversing an array 
// takes O(N) time and O(1) Space

#include <bits/stdc++.h>
using namespace std;
void Reverse_Array(int A[], int n)
{
    int l = 0;
    int h = n - 1;
    while (l < h)
    {
        swap(A[l], A[h]);
        l += 1;
        h -= 1;
    }
}

int main()
{
    int A[] = {1, 25, 36, 51, 63, 100};
    int n = sizeof(A) / sizeof(A[0]);
    for (int i = 0; i < n; i++)
    {
        cout << A[i] << " ";
    }
    cout << endl;
    Reverse_Array(A, n);
    for (int i = 0; i < n; i++)
    {
        cout << A[i] << " ";
    }
    cout << endl;
    return 0;
}

******************************************************************************************************************************************************************************

//printing all the possible pairs within an array
#include <bits/stdc++.h>
using namespace std;
void printingallpairs(int a[], int n)
{
    for (int i = 0; i < n; i++)
    {
        int x = a[i];
        for (int j = 0; j < n; j++)
        {
            cout << x << "," << a[j] << endl;
        }
        cout << endl;
    }
}
int main()
{
    int a[] = {1, 2, 4, 8, 5};
    int n = sizeof(a) / sizeof(int);
    printingallpairs(a, n);
    return 0;
}

******************************************************************************************************************************************************************************

//printing the element pairs of an array
#include <bits/stdc++.h>
using namespace std;
void printingpairs(int a[], int n)
{
    for (int i = 0; i < n; i++)
    {
        int x = a[i];
        for (int j = i + 1; j < n; j++)
        {
            cout << x << "," << a[j] << endl;
        }
        cout << endl;
    }
}
int main()
{
    int a[] = {1, 2, 4, 8, 5};
    int n = sizeof(a) / sizeof(int);
    printingpairs(a, n);
    return 0;
}

*****************************************************************************************************************************************************************************

//printing all possible subarrays 

#include <bits/stdc++.h>
using namespace std;
void printingsubarray(int a[], int n)
{
    for (int i = 0; i < n; i++)
    {

        for (int j = i; j < n; j++)
        {
            for (int k = i; k <= j; k++)
            {
                cout << a[k] << ",";
            }
            cout << endl;
        }
    }
}
int main()
{
    int a[] = {1, 2, 4, 8, 5};
    int n = sizeof(a) / sizeof(int);
    printingsubarray(a, n);

    return 0;
}

*****************************************************************************************************************************************************************************

//finding each subarray sum and the largest sum among them --brute force

#include <bits/stdc++.h>
using namespace std;
void printingsubarraysum(int a[], int n)
{
    int largest_sum = 0;
    for (int i = 0; i < n; i++)
    {

        for (int j = i; j < n; j++)
        {
            int subsum = 0;
            for (int k = i; k <= j; k++)
            {
                cout << a[k] << ",";
                subsum += a[k];
            }
            cout << endl;
            cout << subsum;
            cout << endl;
            largest_sum = max(largest_sum, subsum);
        }
    }
    cout << largest_sum;
}
int main()
{
    int a[] = {-2, 3, 4, -1, 5, -12, 6, 1, 3};
    int n = sizeof(a) / sizeof(int);
    printingsubarraysum(a, n);

    return 0;
}
