// Reversing an array 
// takes O(N) time and O(1) Space

#include <bits/stdc++.h>
using namespace std;
void Reverse_Array(int A[], int n)
{
    int l = 0;
    int h = n - 1;
    while (l < h)
    {
        swap(A[l], A[h]);
        l += 1;
        h -= 1;
    }
}

int main()
{
    int A[] = {1, 25, 36, 51, 63, 100};
    int n = sizeof(A) / sizeof(A[0]);
    for (int i = 0; i < n; i++)
    {
        cout << A[i] << " ";
    }
    cout << endl;
    Reverse_Array(A, n);
    for (int i = 0; i < n; i++)
    {
        cout << A[i] << " ";
    }
    cout << endl;
    return 0;
}

******************************************************************************************************************************************************************************

//printing all the possible pairs within an array
#include <bits/stdc++.h>
using namespace std;
void printingallpairs(int a[], int n)
{
    for (int i = 0; i < n; i++)
    {
        int x = a[i];
        for (int j = 0; j < n; j++)
        {
            cout << x << "," << a[j] << endl;
        }
        cout << endl;
    }
}
int main()
{
    int a[] = {1, 2, 4, 8, 5};
    int n = sizeof(a) / sizeof(int);
    printingallpairs(a, n);
    return 0;
}

******************************************************************************************************************************************************************************

//printing the element pairs of an array--O(N2)

#include <bits/stdc++.h>
using namespace std;
void printingpairs(int a[], int n)
{
    for (int i = 0; i < n; i++)
    {
        int x = a[i];
        for (int j = i + 1; j < n; j++)
        {
            cout << x << "," << a[j] << endl;
        }
        cout << endl;
    }
}
int main()
{
    int a[] = {1, 2, 4, 8, 5};
    int n = sizeof(a) / sizeof(int);
    printingpairs(a, n);
    return 0;
}

*****************************************************************************************************************************************************************************

//printing all possible subarrays --O(N3)

#include <bits/stdc++.h>
using namespace std;
void printingsubarray(int a[], int n)
{
    for (int i = 0; i < n; i++)
    {

        for (int j = i; j < n; j++)
        {
            for (int k = i; k <= j; k++)
            {
                cout << a[k] << ",";
            }
            cout << endl;
        }
    }
}
int main()
{
    int a[] = {1, 2, 4, 8, 5};
    int n = sizeof(a) / sizeof(int);
    printingsubarray(a, n);

    return 0;
}

*****************************************************************************************************************************************************************************

//finding each subarray sum and the largest sum among them --brute force--O(N3)

#include <bits/stdc++.h>
using namespace std;
void printingsubarraysum(int a[], int n)
{
    int largest_sum = 0;
    for (int i = 0; i < n; i++)
    {

        for (int j = i; j < n; j++)
        {
            int subsum = 0;
            for (int k = i; k <= j; k++)
            {
                cout << a[k] << ",";
                subsum += a[k];
            }
            cout << endl;
            cout << subsum;
            cout << endl;
            largest_sum = max(largest_sum, subsum);
        }
    }
    cout << largest_sum;
}
int main()
{
    int a[] = {-2, 3, 4, -1, 5, -12, 6, 1, 3};
    int n = sizeof(a) / sizeof(int);
    printingsubarraysum(a, n);

    return 0;
}

****************************************************************************************************************************************************************************

//finding each subarray sum and the largest sum among them --prefix sum approach --O(N2)TC , SC-O(N) due to extra space taken by prefix array in the stack memory

#include <bits/stdc++.h>
using namespace std;
void printingsubarraysum(int a[], int n)
{
    int prefix[100] = {0};
    prefix[0] = a[0];
    for (int i = 1; i < n; i++)
    {
        prefix[i] = prefix[i - 1] + a[i];
    }
    int largest_sum = 0;
    for (int i = 0; i < n; i++)
    {

        for (int j = i; j < n; j++)
        {
            int subsum = i > 0 ? prefix[j] - prefix[i - 1] : prefix[j];

            largest_sum = max(largest_sum, subsum);
        }
    }
    cout << largest_sum;
}
int main()
{
    int a[5];
    for (int i = 0; i < 5; i++)
    {
        cin >> a[i];
    }
    int n = sizeof(a) / sizeof(int);
    for (int i = 0; i < 5; i++)
    {
        cout << a[i] << ",";
    }
    cout << endl;
    printingsubarraysum(a, n);

    return 0;
}

*****************************************************************************************************************************************************************************

//SUBARRAY SUM- Kadane's Algo-O(N),SC-O(1)

#include <bits/stdc++.h>
using namespace std;
void printingsubarraysum(int a[], int n)
{
    int cs = 0;
    int ms = 0;
    for (int i = 0; i < n; i++)
    {
        cs = cs + a[i];
        if (cs < 0)
        {
            cs = 0;
        }
        ms = max(ms, cs);
    }
    cout << ms;
}
int main()
{
    int a[5];
    for (int i = 0; i < 5; i++)
    {
        cin >> a[i];
    }
    int n = sizeof(a) / sizeof(int);
    for (int i = 0; i < 5; i++)
    {
        cout << a[i] << ",";
    }
    cout << endl;
    printingsubarraysum(a, n);

    return 0;
}

****************************************************************************************************************************************************************************
upperbound-O(N)
lowerbound-O(N)

#include <bits/stdc++.h>
using namespace std;

int lowerbound(int A[],int val,int n){

    int l=0,h=n-1,ans=val;
    while(l<=h){
        int mid=(l+h)/2;
        if(A[mid]>val){
            h=mid-1;
        }
        else{
            ans=A[mid];
            l=mid+1;
        }
    }
    return ans;
    
}
int upperbound(int A[],int val,int n){

    int l=0,h=n-1,ans=val;
    while(l<=h){
        int mid=(l+h)/2;
        if(A[mid]<val){
            l=mid+1;
        }
        else{
            ans=A[mid];
            h=mid-1;
        }
    }
    return ans;
    
}




int main() {
	// your code goes here
    int a[]={-1,2,3,5};
    int n=sizeof(a)/sizeof(int);
    
    int x=upperbound(a,4,n);
    int y=lowerbound(a,4,n);
    cout<<x<<endl<<y;
    

	return 0;
}
***************************************************************************************************************************************************************************
// largest element-O(N)
#include<bits/stdc++.h>
using namespace std;

int largestElement(vector<int> A) {
    int n = A.size();
    int x;
    for (int i = 0; i < n; i++)
    {
        x = A[0];
        if (A[i] > x)
        {
            x = A[i];
        }
    }
    return x;
     
}

***************************************************************************************************************************************************************************
// max_subarray_sum-O(N) 

#include<bits/stdc++.h>
using namespace std;

int maxSumSubarray(vector<int> A) {
    int n=A.size();
    bool f=true;
    int result=INT_MIN;
    for(auto x:A){
        if(x>0) f=false;
        if(x>result) result=x;
    }
    if(f) return result;
    int cs=0;
    int ms=0;
    for(int i=0;i<n;i++){
        cs=cs+A[i];
        if(cs<0){
            cs=0;
        }
        ms=max(ms,cs);
    }
    return ms;
    
}
*****************************************************************************************************************************************************************************
// k rotate -- rotate an array k times clockwise

#include<bits/stdc++.h>
using namespace std;
void reverse(vector<int>&a,int l,int h){
    while(l<h){
        swap(a[l],a[h]);
        l+=1;
        h-=1;
    }
}
vector<int> kRotate(vector<int> a, int k){
    int n=a.size();
reverse(a,0,n-k-1);
reverse(a,n-k,n-1);
reverse(a,0,n-1);
return a;
    
}
*****************************************************************************************************************************************************************************
